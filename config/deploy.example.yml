# Name of your application. Used to uniquely configure containers.
service: mojura

# Name of the container image.
image: moab/mojura

# Deploy to these servers.
# Use a different ssh user than root
ssh:
  user: deploy
servers:
  web:
    - SERVER_IP
  job:
    hosts:
      - SERVER_IP
    cmd: bin/rails solid_queue:start

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: mojura.moab.jp
  forward_headers: true

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  server: ${REPO_SERVER}
  username: AWS

  # Always use an access token rather than real password when possible.
  password:
    - AWS_ECR_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
    - POSTGRES_PASSWORD
  clear:
    DB_HOST: mojura-postgres
    POSTGRES_USER: mojura
    POSTGRES_DB: mojura_production
    DB_PORT: 5432 # use 5432 regardless of what `localhost` port you expose below
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    SOLID_QUEUE_IN_PUMA: false

    # Set number of processes dedicated to Solid Queue (default: 1)
    JOB_CONCURRENCY: 3

    # Set number of cores available to the application on each server (default: 1).
    WEB_CONCURRENCY: 2

    # Match this to any external database server to configure Active Record correctly
    # Use mojura-db for a db accessory server on same machine via local kamal docker network.
    # DB_HOST: 192.168.0.2

    # Log everything from Rails
    RAILS_LOG_LEVEL: debug

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"

# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "mojura_storage:/rails/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64
  remote: ssh://root@${SERVER_IP}

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  #
  # # Pass arguments and secrets to the Docker build process
  args:
    RUBY_VERSION: 3.4.2
  secrets:
    - AWS_ECR_PASSWORD
    - RAILS_MASTER_KEY

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  postgres:
    image: postgres:15
    host: SERVER_IP
    port: "127.0.0.1:5433:5432" # Change this for multiple Postgres containers in the same machine
    env:
      clear:
        POSTGRES_USER: "mojura"
        POSTGRES_DB: "mojura_production"
      secret:
        - POSTGRES_PASSWORD
    directories:
      - mojura_postgres_data:/var/lib/postgresql/data
    files:
      - db/production_setup.sql:/docker-entrypoint-initdb.d/setup.sql
